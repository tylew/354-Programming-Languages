-- the simplest function
val id = \x.x ;;

-- we can use arithmetic on numbers
val plusone = \x. x+1;;

-- rec for recursive definitions, case instead of if-then-else
rec add = \x . \y. case x of { 
    0 -> y, 
    _ -> plusone (add (x-1) y)} ;;

-- pattern matching on lists
rec member = \x.\y. case y of { 
    [] -> false, 
    (a:as) -> case x == a of { true -> true, _ -> member x as } };;

val isempty = \x. case x of {
    [] -> true,
    (a:as) -> false
};;

rec fib = \x. case x of {
    0 -> 0,
    1 -> 1,
    _ -> fib (x-1) + fib (x-2)
};;

rec length = \x. case x of {
    [] -> 0,
    (a:as) -> 1 + length as
};;

rec even = \x. case x of {
    [] -> 1,
    (a:as) -> case as of {
        [] -> 0,
        _ -> even (tail as)
    }
};;

rec reverse = \x. case (tail x) of {
    [] -> head x,
    _ -> (reverse (tail x)):[head x]
};;

rec weave = \x.\y. case x of {
    [] -> y,
    _ -> (head x):(weave y (tail x))
};;
