
// cabal exec LambdaNat-exe test/mytests.lc

let is_empty = \x. 
    if hd x = 0 
    then 1 
    else 0 
in 
is_empty 1:#

/* 
;;

// test: sum function, commented out

let rec sum = \x. 
    if x = 0 
    then 1 
    else x + (sum (x - 1))
in
sum 5
*/

;;

let rec fib = \x. 
    if x = 0 
    then 0 
    else 
        if x = 1 
        then 1 
        else (fib (x - 1)) + (fib (x - 2)) 
in 
fib 6

;;

let rec length = \x. 
    if x = # 
    then 0 
    else 1 + (length (tl x)) 
in 
length 3:5:8:9:#

;;

let rec even = \x.
    if x = # 
    then 1 
    else 
        if tl x = # 
        then 0 
        else even (tl tl x) 
in even a1:a2:a3:a4:# 

;; 


let rec weave = \x.\y. 
    if x = # 
    then y 
    else (hd x) : (weave y (tl x)) 
in 
weave (1:2:3:#) (4:5:6:#)

;;

let reverse = \z. 
    (let rec func = \x. 
        if (tl x) = # 
        then (hd x) 
        else ((func (tl x)) : (hd x)) 
    in func z)
    :# 
in 
reverse 1:2:7:20:# 