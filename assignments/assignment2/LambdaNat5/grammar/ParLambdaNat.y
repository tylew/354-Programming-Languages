-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParLambdaNat
  ( happyError
  , myLexer
  , pProgram
  , pListExp
  , pExp1
  , pExp2
  , pExp3
  , pExp4
  , pExp6
  , pExp9
  , pExp10
  , pExp11
  , pExp13
  , pExp15
  , pExp16
  , pExp17
  , pExp
  , pExp5
  , pExp7
  , pExp8
  , pExp12
  , pExp14
  ) where

import Prelude

import qualified AbsLambdaNat
import LexLambdaNat

}

%name pProgram Program
%name pListExp ListExp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp6 Exp6
%name pExp9 Exp9
%name pExp10 Exp10
%name pExp11 Exp11
%name pExp13 Exp13
%name pExp15 Exp15
%name pExp16 Exp16
%name pExp17 Exp17
%name pExp Exp
%name pExp5 Exp5
%name pExp7 Exp7
%name pExp8 Exp8
%name pExp12 Exp12
%name pExp14 Exp14
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '#'          { PT _ (TS _ 1)  }
  '('          { PT _ (TS _ 2)  }
  ')'          { PT _ (TS _ 3)  }
  '*'          { PT _ (TS _ 4)  }
  '+'          { PT _ (TS _ 5)  }
  '-'          { PT _ (TS _ 6)  }
  '.'          { PT _ (TS _ 7)  }
  ':'          { PT _ (TS _ 8)  }
  ';;'         { PT _ (TS _ 9)  }
  '='          { PT _ (TS _ 10) }
  '\\'         { PT _ (TS _ 11) }
  'else'       { PT _ (TS _ 12) }
  'hd'         { PT _ (TS _ 13) }
  'if'         { PT _ (TS _ 14) }
  'in'         { PT _ (TS _ 15) }
  'less_equal' { PT _ (TS _ 16) }
  'let'        { PT _ (TS _ 17) }
  'rec'        { PT _ (TS _ 18) }
  'then'       { PT _ (TS _ 19) }
  'tl'         { PT _ (TS _ 20) }
  L_integ      { PT _ (TI $$)   }
  L_Id         { PT _ (T_Id $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Id :: { AbsLambdaNat.Id }
Id  : L_Id { AbsLambdaNat.Id $1 }

Program :: { AbsLambdaNat.Program }
Program : ListExp { AbsLambdaNat.Prog $1 }

ListExp :: { [AbsLambdaNat.Exp] }
ListExp
  : {- empty -} { [] }
  | Exp { (:[]) $1 }
  | Exp ';;' ListExp { (:) $1 $3 }

Exp1 :: { AbsLambdaNat.Exp }
Exp1 : '\\' Id '.' Exp { AbsLambdaNat.EAbs $2 $4 } | Exp2 { $1 }

Exp2 :: { AbsLambdaNat.Exp }
Exp2
  : 'if' Exp '=' Exp 'then' Exp 'else' Exp { AbsLambdaNat.EIf $2 $4 $6 $8 }
  | Exp3 { $1 }

Exp3 :: { AbsLambdaNat.Exp }
Exp3
  : 'let' Id '=' Exp 'in' Exp { AbsLambdaNat.ELet $2 $4 $6 }
  | Exp4 { $1 }

Exp4 :: { AbsLambdaNat.Exp }
Exp4
  : 'let' 'rec' Id '=' Exp 'in' Exp { AbsLambdaNat.ERec $3 $5 $7 }
  | Exp5 { $1 }

Exp6 :: { AbsLambdaNat.Exp }
Exp6
  : 'hd' Exp { AbsLambdaNat.EHd $2 }
  | 'tl' Exp { AbsLambdaNat.ETl $2 }
  | Exp7 { $1 }

Exp9 :: { AbsLambdaNat.Exp }
Exp9
  : Exp10 'less_equal' Exp10 { AbsLambdaNat.ELE $1 $3 }
  | Exp10 { $1 }

Exp10 :: { AbsLambdaNat.Exp }
Exp10
  : Exp10 '+' Exp11 { AbsLambdaNat.EPlus $1 $3 }
  | Exp10 '-' Exp11 { AbsLambdaNat.EMinus $1 $3 }
  | Exp11 { $1 }

Exp11 :: { AbsLambdaNat.Exp }
Exp11
  : Exp11 '*' Exp12 { AbsLambdaNat.ETimes $1 $3 } | Exp12 { $1 }

Exp13 :: { AbsLambdaNat.Exp }
Exp13 : Exp13 Exp14 { AbsLambdaNat.EApp $1 $2 } | Exp14 { $1 }

Exp15 :: { AbsLambdaNat.Exp }
Exp15
  : '#' { AbsLambdaNat.ENil }
  | Exp16 ':' Exp15 { AbsLambdaNat.ECons $1 $3 }
  | Exp16 { $1 }

Exp16 :: { AbsLambdaNat.Exp }
Exp16 : Integer { AbsLambdaNat.EInt $1 } | Exp17 { $1 }

Exp17 :: { AbsLambdaNat.Exp }
Exp17 : Id { AbsLambdaNat.EVar $1 } | '(' Exp ')' { $2 }

Exp :: { AbsLambdaNat.Exp }
Exp : Exp1 { $1 }

Exp5 :: { AbsLambdaNat.Exp }
Exp5 : Exp6 { $1 }

Exp7 :: { AbsLambdaNat.Exp }
Exp7 : Exp8 { $1 }

Exp8 :: { AbsLambdaNat.Exp }
Exp8 : Exp9 { $1 }

Exp12 :: { AbsLambdaNat.Exp }
Exp12 : Exp13 { $1 }

Exp14 :: { AbsLambdaNat.Exp }
Exp14 : Exp15 { $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

